// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api.proto

package homework_2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MailServClient is the client API for MailServ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailServClient interface {
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error)
	CustomerSearch(ctx context.Context, in *CustomerSearchReq, opts ...grpc.CallOption) (*CustomerSearchResp, error)
	DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserResp, error)
	AddNewMailService(ctx context.Context, in *AddNewMailServiceReq, opts ...grpc.CallOption) (*AddNewMailServiceResp, error)
	ConstantlyUpdate(ctx context.Context, in *ConstantlyUpdateReq, opts ...grpc.CallOption) (*ConstantlyUpdateResp, error)
	CheckForUpdates(ctx context.Context, in *CheckForUpdatesReq, opts ...grpc.CallOption) (*CheckForUpdatesResp, error)
	GetLastMessages(ctx context.Context, in *GetLastMessageReq, opts ...grpc.CallOption) (*GetLastMessageResp, error)
}

type mailServClient struct {
	cc grpc.ClientConnInterface
}

func NewMailServClient(cc grpc.ClientConnInterface) MailServClient {
	return &mailServClient{cc}
}

func (c *mailServClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error) {
	out := new(CreateUserResp)
	err := c.cc.Invoke(ctx, "/api.MailServ/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailServClient) CustomerSearch(ctx context.Context, in *CustomerSearchReq, opts ...grpc.CallOption) (*CustomerSearchResp, error) {
	out := new(CustomerSearchResp)
	err := c.cc.Invoke(ctx, "/api.MailServ/CustomerSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailServClient) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserResp, error) {
	out := new(DeleteUserResp)
	err := c.cc.Invoke(ctx, "/api.MailServ/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailServClient) AddNewMailService(ctx context.Context, in *AddNewMailServiceReq, opts ...grpc.CallOption) (*AddNewMailServiceResp, error) {
	out := new(AddNewMailServiceResp)
	err := c.cc.Invoke(ctx, "/api.MailServ/AddNewMailService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailServClient) ConstantlyUpdate(ctx context.Context, in *ConstantlyUpdateReq, opts ...grpc.CallOption) (*ConstantlyUpdateResp, error) {
	out := new(ConstantlyUpdateResp)
	err := c.cc.Invoke(ctx, "/api.MailServ/ConstantlyUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailServClient) CheckForUpdates(ctx context.Context, in *CheckForUpdatesReq, opts ...grpc.CallOption) (*CheckForUpdatesResp, error) {
	out := new(CheckForUpdatesResp)
	err := c.cc.Invoke(ctx, "/api.MailServ/CheckForUpdates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailServClient) GetLastMessages(ctx context.Context, in *GetLastMessageReq, opts ...grpc.CallOption) (*GetLastMessageResp, error) {
	out := new(GetLastMessageResp)
	err := c.cc.Invoke(ctx, "/api.MailServ/GetLastMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailServServer is the server API for MailServ service.
// All implementations must embed UnimplementedMailServServer
// for forward compatibility
type MailServServer interface {
	CreateUser(context.Context, *CreateUserReq) (*CreateUserResp, error)
	CustomerSearch(context.Context, *CustomerSearchReq) (*CustomerSearchResp, error)
	DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserResp, error)
	AddNewMailService(context.Context, *AddNewMailServiceReq) (*AddNewMailServiceResp, error)
	ConstantlyUpdate(context.Context, *ConstantlyUpdateReq) (*ConstantlyUpdateResp, error)
	CheckForUpdates(context.Context, *CheckForUpdatesReq) (*CheckForUpdatesResp, error)
	GetLastMessages(context.Context, *GetLastMessageReq) (*GetLastMessageResp, error)
	mustEmbedUnimplementedMailServServer()
}

// UnimplementedMailServServer must be embedded to have forward compatible implementations.
type UnimplementedMailServServer struct {
}

func (UnimplementedMailServServer) CreateUser(context.Context, *CreateUserReq) (*CreateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedMailServServer) CustomerSearch(context.Context, *CustomerSearchReq) (*CustomerSearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerSearch not implemented")
}
func (UnimplementedMailServServer) DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedMailServServer) AddNewMailService(context.Context, *AddNewMailServiceReq) (*AddNewMailServiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewMailService not implemented")
}
func (UnimplementedMailServServer) ConstantlyUpdate(context.Context, *ConstantlyUpdateReq) (*ConstantlyUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConstantlyUpdate not implemented")
}
func (UnimplementedMailServServer) CheckForUpdates(context.Context, *CheckForUpdatesReq) (*CheckForUpdatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckForUpdates not implemented")
}
func (UnimplementedMailServServer) GetLastMessages(context.Context, *GetLastMessageReq) (*GetLastMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastMessages not implemented")
}
func (UnimplementedMailServServer) mustEmbedUnimplementedMailServServer() {}

// UnsafeMailServServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailServServer will
// result in compilation errors.
type UnsafeMailServServer interface {
	mustEmbedUnimplementedMailServServer()
}

func RegisterMailServServer(s grpc.ServiceRegistrar, srv MailServServer) {
	s.RegisterService(&MailServ_ServiceDesc, srv)
}

func _MailServ_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MailServ/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailServ_CustomerSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServServer).CustomerSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MailServ/CustomerSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServServer).CustomerSearch(ctx, req.(*CustomerSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailServ_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MailServ/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServServer).DeleteUser(ctx, req.(*DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailServ_AddNewMailService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewMailServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServServer).AddNewMailService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MailServ/AddNewMailService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServServer).AddNewMailService(ctx, req.(*AddNewMailServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailServ_ConstantlyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConstantlyUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServServer).ConstantlyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MailServ/ConstantlyUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServServer).ConstantlyUpdate(ctx, req.(*ConstantlyUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailServ_CheckForUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckForUpdatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServServer).CheckForUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MailServ/CheckForUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServServer).CheckForUpdates(ctx, req.(*CheckForUpdatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailServ_GetLastMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServServer).GetLastMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MailServ/GetLastMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServServer).GetLastMessages(ctx, req.(*GetLastMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MailServ_ServiceDesc is the grpc.ServiceDesc for MailServ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailServ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.MailServ",
	HandlerType: (*MailServServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _MailServ_CreateUser_Handler,
		},
		{
			MethodName: "CustomerSearch",
			Handler:    _MailServ_CustomerSearch_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _MailServ_DeleteUser_Handler,
		},
		{
			MethodName: "AddNewMailService",
			Handler:    _MailServ_AddNewMailService_Handler,
		},
		{
			MethodName: "ConstantlyUpdate",
			Handler:    _MailServ_ConstantlyUpdate_Handler,
		},
		{
			MethodName: "CheckForUpdates",
			Handler:    _MailServ_CheckForUpdates_Handler,
		},
		{
			MethodName: "GetLastMessages",
			Handler:    _MailServ_GetLastMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
